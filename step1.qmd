# Step 1: Proxy sources

```{r, cache=TRUE, echo=FALSE}
load("data/analytic3cycles.RData")
```

```{r, cache=TRUE, echo=FALSE}
# Prepare the minimal analytic data only with the following 4 information:
# 
# -   identifying information (`idx`)
# -   exposure (`obese`)
# -   outcome (`diabetes`)
# -   domain of the codes (`dx`). In this example we only have prescription domain (1 domain `dx`; see next)
analytic <- data.complete
idx <- analytic$id
outcome <- as.numeric(analytic$diabetes == "Yes") 
exposure <- as.numeric(analytic$obese == "Yes")
domain <- "dx"
analytic.dfx <- as.data.frame(cbind(idx, exposure, outcome, domain))
# head(analytic.dfx)
```

## Identify the data dimensions (proxy sources)

In this example we only have <mark>prescription domain</mark> (1 domain `dx` of ICD-10-CM code). Hence <mark>$p = 1$</mark> in this exercise.

::: column-margin
NHANES Questionnaire collects information on: (a) dietary supplements, (b) nonprescription antacids, (c) prescription medications, and (d) preventive aspirin use.
:::

## Define a covariate assessment period (CAP)

```{r echo=FALSE, out.width='80%', fig.align="center"}
knitr::include_graphics('images/fu.png')
```

::: column-margin
[@connolly2019quantifying; @schneeweiss2009high]
:::

We only collect proxy information from a well-defined CAP. In our case, it was <mark>$30$ days</mark>.

::: column-margin
NHANES asked "In the past 30 days, have you used or taken medication for which a prescription is needed? Do not include prescription vitamins or minerals you may have already told me about."
:::

## Merge all proxy sources into one data

We merge proxy data (ICD-10 codes) from 3 cycles.

```{r, cache=TRUE, echo=FALSE}
load("data/analytic13recoded.RData")
load("data/analytic15recoded.RData")
load("data/analytic17recoded.RData")
dat.proxy.long <- rbind(rx2013, rx2015, rx2017) 
dat.proxy.long$icd10 <- NULL
colnames(dat.proxy.long)[names(dat.proxy.long)=="icd10.new"] <- "icd10"
```

## Omit duplicated information

::: column-margin
We need to delete codes that could be close proxies of exposure and/or outcome, or other investigator specified covariates we have already selected in step0.
:::

```{r echo=FALSE, out.width='70%', fig.align="center"}
knitr::include_graphics('images/icddiab.png')
```

## Long format proxy data

```{r, cache=TRUE, echo=FALSE}
dat.proxy.long <- subset(dat.proxy.long, icd10 != "E66") # Overweight and obesity
dat.proxy.long <- subset(dat.proxy.long, icd10 != "O24") # Gestational diabetes mellitus
dat.proxy.long <- subset(dat.proxy.long, icd10 != "E10") # Type 1 diabetes mellitus
dat.proxy.long <- subset(dat.proxy.long, icd10 != "E11") # Type 2 diabetes mellitus
```

```{r, cache=TRUE, echo=FALSE}
proxy.var.long <- dat.proxy.long
proxy.var.long$idx <- proxy.var.long$id
proxy.var.long$id <- NULL
```

Here is an example of 3 digit codes for 1 patient with subject ID "100001". We create the same for all patients.

```{r, cache=TRUE, echo=FALSE}
library(magrittr)
library(kableExtra)
# data.for.patient100001 <- proxy.var.long[proxy.var.long$idx == 	100001,]
icd.codes <- c("F33", "I10", "M62", "F32", "M25", "K21", "M79", "R12")
icd.meaning <- c("Major depressive disorder, recurrent", "Hypertension", "Muscle spasm" , "Major depressive disorder, single episode", "Joint disorder/pain", "Gastro-esophageal reflux disease", "musculoskeletal pain conditions", "	Heartburn")
icd.id <- "100001"
data.for.patient100001 <- cbind(icd.id, icd.codes, icd.meaning)
colnames(data.for.patient100001) <- c("ID", "ICD 10 codes (3 digit)", "Description")
knitr::kable(data.for.patient100001) %>%
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE) %>%
  kableExtra::column_spec(2, width = "3cm", extra_css = "text-align:center;")
```

## Merge Proxy data with Analytic data

```{r, cache=TRUE, echo=FALSE, message=FALSE, warning=FALSE}
require(dplyr) 
dfx <- merge(analytic.dfx, proxy.var.long, by = "idx")
head(dfx)
basetable <- dfx %>% select(idx, exposure, outcome) %>% distinct()
patientIds <- basetable$idx
save(dfx, patientIds, basetable, file = "data/dfx.RData")
```
